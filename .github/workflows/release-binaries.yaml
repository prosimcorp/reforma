name: Compile into binaries

on:
  release:
    types: [created]

  workflow_dispatch:
    inputs:
      release:
        description: 'Release tag where to create the binaries (as SemVer vX.X.X)'
        required: true
        default: v0.1.0

permissions:
  contents: write
  packages: write

jobs:
  releases-matrix:
    name: Release Go Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build and publish in parallel:
        # linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows
    steps:
      - id: read_tag
        name: Read release tag name (mostly vx.x.x)
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            export TAG="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            export TAG="${{ inputs.release }}"
          fi

          echo "release_tag=${TAG}" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.read_tag.outputs.release_tag }}

      - name: Read Go version from go.mod
        id: read_go_version
        run: |
          go_version=$(grep "^go " go.mod | awk '{print $2}')
          echo "GO_VERSION=${go_version}" >> "$GITHUB_OUTPUT"

      - uses: wangyoucao577/go-release-action@v1.31
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goversion: "${{ steps.read_go_version.outputs.go_version }}"
          project_path: "./cmd/"
          binary_name: "reforma"
          release_tag: ${{ inputs.release }}
          overwrite: true
          extra_files: LICENSE README.md
